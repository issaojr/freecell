#include "iu.h"
#include <cstdio>
#include <iostream>
#include <cstdlib>
using namespace std;

Iu::Iu(Freecell *jogo)
{
	this->jogo = jogo;
	//this->telaInicial();
	//Iu::printPilhas();
	//Iu::menu();
	//Iu::entrada();
}

void Iu::telaInicial()
{
	int i;
	
	cout << "\n\t";
	for(i = 0; i < 30; i++)
		printf("*");
	
	cout << "\n\t*";
	for(i = 0; i < 28; i++)
		cout << " ";
	cout << "*\n";
	cout << "\t*   BEM-VINDO AO FREECELL!   *\n";
	cout << "\t*       Beta - V.0.1.0       *\n";
	cout << "\t*";
	for(i = 0; i < 28; i++)
		cout << " ";
	cout << "*\n";
	
	cout << "\t";
	for(int i = 0; i < 30; i++)
		printf("*");

	cout << endl << endl;
}

void Iu::telaFinal()
{
	int i;
	
	cout << "\n\t";
	for(i = 0; i < 30; i++)
		printf("*");
	
	cout << "\n\t*";
	for(i = 0; i < 28; i++)
		cout << " ";
	cout << "*\n";
	cout << "\t*   OBRIGADO POR JOGAR! :-)  *\n";
	cout << "\t*";
	for(i = 0; i < 28; i++)
		cout << " ";
	cout << "*\n";
	
	cout << "\t";
	for(i = 0; i < 30; i++)
		printf("*");
}

void Iu::printPilhas()
{
	int i, v, n;
	Carta cAux;	
	/* 
	 * A seguir e' feito o desempilhamento de todas as cartas das 8
	 * pilhas iniciais, empilhando-as em pilhas auxiliares
	 */	
	/*
	for(i = 0; i < 8; i++)	
		while(!jogo->getPini(i)->estaVazia())
		{
			cAux = jogo->getPini(i)->desempilha();
			auxIni[i].empilha(&cAux);
		}*/
	
	for(i = 0; i < 4; i++)
	{
		if(!jogo->getPinter(i).estaVazia())
		{
			cAux = jogo->getPinter(i)->desempilha();
			v = cAux.getValor();
			n = cAux.getNaipe();
			jogo->getPinter(i).empilha(&cAux);
			
			cout << v << n << endl;
			printf("| %d%d | ",v,n);
		}
		else
		{
			printf("|    | ");
		}
		
	}
	
	cout << "<<>> ";
	for(i = 0; i < 4; i++)
	{
		if(!jogo->getPfim(i).estaVazia())
		{
			v = jogo->getPfim(i).cartaTopo().getValor();
			n = jogo->getPfim(i).cartaTopo().getNaipe();
			printf("| %d%d | ",v,n);
		}
		else
		{
			printf("|    | ");
		}
		
	}
				
	
}

void Iu::menu()
{
	// digitar opcoes
	cout << "teste de menu" << endl;
}

int Iu::entrada()
{
	/*
	 * Esta funcao recebe e trata as strings de entrada.
	 */ 	
	int origem, destino; // indices para as pilhas
	int p1, p2; // 1 para pilhaIni, 2 para pilhaInter, 3 para pilhaFim
	string str1, str2;
	char ch1, ch2;
	string cmd; // armazena a entrada do usuario

	cout << endl << endl <<"->Entre com o comando desejado: ";
	cin >> cmd;	
	
	/* 
	 * A seguir, verifica-se a string. Retorna 0 para sair, 1 para iniciar novo
	 * jogo, 2 para auxilio, 3 para visualizar os creditos, 4 para informar 
	 * que o comando digitado e' desconhecido e 5 para indicar que houve sucesso.
	 * 
	 * Primeiramente, testa se a string nao e' formada por 2 caracteres. Strings
	 * de 2 caracteres referem-se a movimentos de cartas.
	 */
	if(cmd.length() != 2)
	{
		if(cmd == "sair")		
			return 0;
		else if(cmd == "novo")
			return 1;
		else if(cmd == "help")
			return 2;
		else if(cmd == "creditos")
			return 3;
		else{		
			cout << "\n\n>>>> Comando desconhecido! <<<<\n\n";
			return 4;
		}
	}else{
		/*
		 * Caso a string seja formada por 2 caracteres, separam-se os dois
		 * atribuindo cada um a uma variavel, str1 e str2.
		 */
		str1 = cmd.substr(0,1); // pega primeiro caracter
		str2 = cmd.substr(1,1); // pega segundo caracter		
		
		char ch1, ch2;
		ch1 = str1[0];
		ch2 = str2[0];		
		
		/*
		 * O teste a seguir define a pilha de origem e representando os
		 * caracteres por meio de inteiros. A funcao Freecell::move()
		 * recebera' esses valores inteiros que sao produzidos aqui.
		 */
		if(ch1 >= '1' && ch1 <= '8')
		{
			p1 = 1;
			origem = atoi(str1.c_str()) - 1;
		}		
		else if((ch1 >= 'a' && ch1 <= 'h') || (ch1 >= 'A' && ch1 <= 'H'))
		{			
			switch(ch1)
			{
			case 'a': case 'A': p1 = 2; origem = 0; break;
			case 'b': case 'B': p1 = 2; origem = 1; break;
			case 'c': case 'C': p1 = 2; origem = 2; break;
			case 'd': case 'D': p1 = 2; origem = 3; break;
			case 'e': case 'E': p1 = 3; origem = 0; break;
			case 'f': case 'F': p1 = 3; origem = 1; break;
			case 'g': case 'G': p1 = 3; origem = 2; break;
			case 'h': case 'H': p1 = 3; origem = 3; break;
			default:
				cout << "\n\n>>>> Comando desconhecido! <<<<\n\n";
				return 4;
			}
		}	
		
		/* 
		 * O mesmo e' feito para a str2, que se refere ao destino da
		 * carta
		 */
		cout << ch2 << endl;
		if(ch2 >= '1' && ch2 <= '8')
		{
			p2 = 1;
			destino = atoi(str2.c_str()) - 1;
		}		
		else
		{			
			switch(ch2)
			{
			case 'a': case 'A': p2 = 2; destino = 0; break;
			case 'b': case 'B': p2 = 2; destino = 1; break;
			case 'c': case 'C': p2 = 2; destino = 2; break;
			case 'd': case 'D': p2 = 2; destino = 3; break;
			case 'e': case 'E': p2 = 3; destino = 0; break;
			case 'f': case 'F': p2 = 3; destino = 1; break;
			case 'g': case 'G': p2 = 3; destino = 2; break;
			case 'h': case 'H': p2 = 3; destino = 3; break;
			default:
				cout << "\n\n>>>> Comando desconhecido! <<<<\n\n";
				return 4;
				break;
			}
		}
	}	

	cout << endl << p1 <<origem << p2 << destino << endl;
	
	
	if(Iu::movimente(p1, origem, p2, destino))
	{
		cout << endl << "\t>>> Movimento realizado com sucesso! <<<" << endl;
		return 5;
	}
	else
	{
		cout << endl << "\t>>> Este movimento nao e' permitido! <<<" << endl;
		return 6;
	}	 
}

bool Iu::movimente(int p1, int orig, int p2, int dest)
{
	jogo->move(jogo->getPini(2),jogo->getPinter(2));
	return true;
	Pilha *pOrigem, *pDestino;
	//pOrigem = new PilhaIni;
	//pDestino = new PilhaFim;
	cout << endl << p1 << orig << p2 << dest << endl;
	switch(p1)
	{
	case 1:
		pOrigem = new PilhaIni;
		pOrigem = jogo->getPini(orig);
		break;
	case 2:
		pOrigem = new PilhaInter;
		pOrigem = jogo->getPinter(orig);
		break;
	case 3:
		pOrigem = new PilhaFim;
		pOrigem = jogo->getPfim(orig);
		break;
	}
	
	switch(p2)
	{
	case 1:
		pDestino = new PilhaIni;
		pDestino = jogo->getPini(dest);
		break;
	case 2:
		pDestino = new PilhaInter;
		pDestino = jogo->getPinter(dest);
		break;
	case 3:
		pDestino = new PilhaFim;
		pDestino = jogo->getPfim(dest);
		break;
	}
		
	return(jogo->move(pOrigem,pDestino));	
}

